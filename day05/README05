/////////////////////////////////////////DAY5///////////////////////////////////////////////
package array;

public class DicsExam02 {

	public static void main(String[] args) {
		//예제1)  주사위를 두개 던져 나온 눈의 합이 5는 경우를 모두 출력
		
		for(int i=1; i<=6; i++) {
			for(int j=1; j<=6; j++) {
				if(i + j == 5) {
					System.out.println("(" + i + "," + j + ")");
				}
			}
		}
		

	}

}

		
================================================
package array;

public class DicsExam01 {

	public static void main(String[] args) {
		//예제2) 주사위 두 개를 던져 나오는 눈의 합이 5이면 종료
		int firstDics=0, secondDics=0;
		boolean run = true;
		
		while(run) {  // while(true), 참인동안 {}안을 실행하라
//			boolean result01 = false;
			int result = 0;
			
			firstDics = (int)(Math.random() * 6) + 1;
			secondDics = (int)(Math.random() * 6) + 1;
			
//			result01 = (firstDics + secondDics) == 5;
//			if(result01)
			
			result = firstDics + secondDics;
			System.out.println("("+firstDics + "," + secondDics + ")");

			if(result == 5) {
			   run = false; // break;
			}
			
			
			
		}
		
		
	}

}



================================================
ㅁ 배열(Array)
	- 동일한 자료형을 묶어 저장하는 참조 자료형
	- 여러 개의 값을 저장할 수 있는 공간
	- 선언시 어떤 자료형을 저장하는지 나타내야 하고
	- 선언시 반드시 크기(배열의 길이)를 설정

1. 배열 객체 생성 및 선언
	- 자료형[] 변수명 = new 자료형[크기];
	  자료형[] 배열명 = new 자료형[크기];
		int[] arr = new int[3]; 
		  정수형 자료 3개를 저장할 수 있는 공간을 힙 메모리 영역에 만들고
		  어디에 저장되어있는지 주소를  arr 변수에 저장
		  힙에 있는 정수형 공간에는 0으로 초기화
		  arr : 참조 변수
		Sting[] str = new String[3]
			heap 문자열을 저장할 공간 3개를 만들고 null로 초기화		

		int arr[] 

	- 자료형[] 변수명;
	  변수명 = new 자료형[크기];
		int[] arr;
		arr = new int[3];

	- 자료형[] 변수명 = new 자료형[]{값1, 값2, 값3}
		자료형 크기를 지정하면 안된다.
		int[] arr = new int[]{10, 20, 30, 40}

	- 자료형[] 변수명 = {값1, 값2, 값3,...}
		초기화 데이터 값의 개수가 배열의 길이를 정해준다.
		선언과 동시에 값을 대입할 때만 사용가능
		메서드의 매개변수값으로 사용할 수 없다.
		int[] arr = {10, 20, 30, 40}

		* 선언과 값의 대입을 분리할 수 없다.
		int[] arr;
		arr = {10, 20, 30, 40 }   => 에러

		int[] arr;
		arr = new int[]{10, 20, 30, 40}  (o)
		
	- 자료형[] 변수명 = null;  
		참조할 배열 객체가 없다는 뜻
		int[] arr = null
		
		int[] testArr = null;
		System.out.println(testArr[0]);
			// 참조할 배열이 없는데 읽으라고 하니까
			// NullPointerException 이 발생 
 
2. 배열의 길이
	- 배열명.length   //비교) 문자열.length()
	- length : 읽기 전용,  변경이 불가하다.  

		int[] arr = new int[]{10, 20, 30, 40}
  		
3. 배열 객체의 내용을 읽어오기 / 배열객체에 값 입력
	- 참조변수명(배열명)
	  배열명[인덱스]

		int[] arr = new int[3];
		arr[0] = 10;
		arr[1] = 20;
		arr[2] = 30;

		System.out.println(arr[0])


4. 배열 출력
	Arrays.toString(배열명)  : 배열을 문자열로 출력
	import java.util.Arrays;

=================================
▣ 자리바꿈
	- a와 b의 값 변경하기
		int a = 8, b=5;	
		
		a = b;    a => 5
		b = a;    b => 5
			// a와 b 모두에 같은 값이 담기게 됨

		=>
		int imsi=0;  //자리바꿈을 위해서는 임시변수 필요
		int a = 8, b=5;	
		
		imsi = a;  // imsi => 8
		a = b;  // a => 5
		b = imsi;  b => 8
------------------------------------------------------
		int a = 8, b = 10, imsi = 0;
		System.out.println("변경전 :  a = " + a + "  b = " + b); 
		 
		imsi = a;
		a = b;
		b = imsi;
		System.out.println("변경후 :  a = " + a + "  b = " + b); 


▣ 최대값과 최소값 구하려면
	- 기준을 하나 설정한 후 제시된 모든 값과 비교해 가면서 값을 변경해 간다.
	- max에는 제시된 값들 보다 더 작은 값을 담거나, 배열인 경우 0인덱스 요소값을 담는다
        	각 값과 max의 값을 비교해서 더 큰값을 max에 담가가면서 비교를 해 나간다.
        	 max = 0,  max = score[0]
	- min에는 제시된 값들 보다 월등히 큰 값을 담거나, 배열인 경우 0인덱스 요소값을 담는다.
		 min = 9999,   min = score[0]
		제시된 각 값과 min에 담긴 값을 비교해서 더 작은 값을 min에 담으면 비교해 나간다.
	 
		
============================================
▣ 2차원 배열
	- 1차원 배열의 배열
	- 가로 및 세로 방향의 2차원으로 데이터를 저장하는 배열

1. 2차원 배열 선언
	  자료형[][] 변수명 = new 자료형[가로길이][세로길이];
		int[][] arr = new int[3][2];
		
	  자료형[][] 변수명 = new 자료형[가로길이][];
		. 가로 길이(크기)는 반드시 지정해야 하지만 세로는 지정하지 않고 
		  코딩 중간에 동적으로 할당할 수있다.
	
	  자료형[][] 변수명 = new 자료형[][]{{값1, 값2, 값3}, {값4,값5,값6}}  
	
	  자료형[][] 변수명 = {
				{값1, 값2},
				{값3, 값4},
				{값5, 값6, 값7}				
			   }


2. 2차원배열의 길이
	- 전체 배열의 개수(행의 개수) :  배열명.length
	- 열의 개수 : 배열명[i].length


3. 2차원 배열의 값 저장 및 읽기
	int[][] arr = new int[2][3];

	arr[0][0] = 10;
	arr[0][1] = 20;
	arr[0][2] = 30;
	arr[1][0] = 40;
	arr[1][1] = 50;
	arr[1][2] = 60;


	for(int i=0; i<arr.length; i++){  //  행
		for(int j=0; j < arr[i].length ; j++){  //열
       			System.out.println(arr[i][j]);
		}
	}

========================================================
▣ 클래스
	- 설계도, 틀
	- 클래스 용도 : 라이브러리(API), 실행용

	- 객체(Object)

1. 객체 지향 프로그래밍(OOP : Object Oriented Programming)
	- 만들고자하는 완성품인 객체를 모델링하고, 집합관계에 있는 부품객체와 사용관계에 있는 객체를 하나씩
	  설계한 후 조립하는 방식으로 프로그램을 개발하는 기법
	
	- 객체지향 프로그램의 특징
		. 캡슐화(Encapsulation) :  정보 은닉
		. 상속(Inheritance) : 재사용성
		. 다형성(Polymorphism) : 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질


2. 클래스의 구성요소
	1) 클래스 멤버 : 
		 필드(field, 멤버변수,클래스 멤버변수) : 클래스에 포함된 변수, 힙 메모리의 객체 내부 생성
			특성, 속성  => 나이, 이름, 성별,과목,...
		 메서드(method) : 클래스가 가지고 있는 기능
			공부한다, 일한다, 달린다,....
			 void working(){ }
	2) 생성자(Constructor) : 클래스의 객체를 생성하는 역할 담당, 객체를 초기화

3. 객체를 생성하는 단계
	1) 클래스를 만든다( 설계도, 틀 )
	2) 객체 생성
	3) 객체 사용