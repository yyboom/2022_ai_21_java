/////////////////////////////////////////DAY2///////////////////////////////////////////////
▣ 변수(Variable)
1. 변수의 정의
	- 하나의 값을 저장할 수 있는 저장 공간
	- 값을 저장할 수 있는 메모리의 특정 번지에 붙여진 이름
	
		a 		= 		20
		저장공간의 이름	대입 연산자	값
		a라는 이름의 공간이  RAM에 할당되고 20이라는 값이 들어간다.
		주소값 : 고유한 값, 중복이 없음

2. 자료형(type,  형)
	- 메모리에 저장할 수 있는 값의 형태를 지정
	
	자료형	type	byte	값
	정수형	int	4	0, 1, -1 , -10  소숫점이 없는 값
	실수형	float	4	0.0f, 2.5F,...
		double	8	2.3, 0.0, -2.7		기본값
	문자형	 char	2	'a', 'A', '김','3',...
	문자열	 String	 참조자료형	"abc", " 홍길동",...

	- 문자 : 'a', '10' 
	  문자열 : "a", "abc","홍길동", "34"
	 숫자 : 1, 30, 50.7

	- 변수에 저장되는 값의 종류와 범위를 결정
	- 선언)
		 자료형	변수명 = 값
		  int       num  = 15
	- java의 모든 변수, 상수는 자료형이 먼저 선언이 되어야 사용할 수 있음
		int num=10;  (o)
		su = 5;(x)  자료형이 선언이 안됨
	- 한 번 정의된 자료형에는 다른 자료형을 저장할 수 없다.
		 int num = 5;   // 정수를 담겠다.
		 double num = 10.0;  (x)

3. 변수 선언
	- 형식)
		자료형 변수명; // 쓰레기 값이 디폴트로 들어 갈 수 있으므로 반드시 초기화해야 함
			int number;  
			number = 10;   //  초기화
		
		자료형 변수명 = 초기값;   // 초기화
			 int number = 10;

			int x;
			int y;
			int z;  	=> int x, y, z;   => int x=0, y=0, z=0;
			x=10;
			y =20;   	=> int x=10, y=20, z=0;
			z = x + y;   

4. 변수의 초기화
	- 변수에 최초로 값이 저장될 때 메모리에 변수가 생성
	- 초기화를 하지 않은 변수는 메모리에서 값을 읽을 수 없음
		
		int age;
		// System.out.println(age);  // 에러, 텅비어 있는 것이라 읽을 수 없음
		age=10;
		System.out.println(age);
	- 초기화를 하지 않으면 쓰레기 값이 들어 갈 수 있어 나중에 문제가 발생할 수 있으므로 
		반드시 초기화를 시킨다.

	
5. 변수 선언 주의 사항(위의 내용 다시 정리)
	- 변수명은 같은 이름으로 선언할 수 없다.(한 번 정의된 자료형에는 다른 자료형을 저장할 수 없다.)
		 int num = 10;
		double num=23.5; (x)
	- 변수를 선언할 때는 초기화를 하지 않으면 쓰레기 값이 들어 갈 수 있어 나중에 문제가 발생할 수 있으므로 
		반드시 초기화를 시킨다.
		int x=0, y=0, z=0;
		double d=0.0;
		char ch = '' (에러)
		char ch = ' '
		String str = null;  // 아직 참조하는 주소값을 모르고 있음
		String str01 = ""

	- 변수 선언은 되도록이면 위쪽 상단에 한꺼번에 선언한다
		{ } 내에서 선언할 때도 되도록이면 위쪽 상단 선언부에 선언한다.


6. 변수명 작성 규칙
	- 첫 글자는 반드시 문자이거나 , _, $로 시작(javascript랑 같음)
	- 첫 글자에는 숫자를 사용할 수 없음
	- 특수 문자는 사용할 수 없음
		number(0),  _number(0)
		-number(x)
		3number(x),  number3(0),  number_3(0)
	- 영어 대소문자를 구분,  되도록이면 소문자를 사용한다.
	- 두 단어 이상이 조합되었을 때는 두 번째 단어의 첫 글자를 대문자로
		studentnumber  =>  가독성이 떨어짐
		studentNumber 		=> 캐멀케이스
		student_number		=> 스네이크 케이스
		iStudent			=> 헝가리언 표기법
	- 공백을 사용할 수 없음
		student number (x)
	- 예약어는 사용할 수 없음(byte, private, public, if, else, for,...)

7. 변수명을 사용하는 이유
	- 반복되는 값들을 쉽게 관리
	- 의미 없는 값을 하나의 정보로 만들기 위해
	
8. 변수의 생존 기간 
	- jvm이 데이터를 삭제시키는 시기
	- 변수는 자신이 선언된  { } 안에서만 사용 가능  => 지역변수
		제어문, 메서드 등의 중괄호 	

		public class VariableExam06 {

			public static void main(String[] args) {
				int variable01 = 15;
		
				if(variable01 > 10) {
				int variable02 = variable01 - 10;
				} // variable02는  여기 {}안에서만 의미
		
				int variable03 = variable02 + variable01 + 5;
				// variable02는 메모리에서 사라져 없으므로 에러
			}
		}


	
===============================================

+  
	- 연결 연산자(문자열 연결)
	- 덧셈

============================
▣ 상수(constant)
	- 항상 그대로인 수
	- 한 번만 값을 저장, 값을 저장하면 다른 값으로 변경할 수 없음
	- 변수 타입 앞에 'final' 이란 키워드 붙임

	- 상수 이름은 언제 대문자로,  두 단어 이상의 조합이면 _로 연결
		maxSpeed => 변수
		MAX_SPEED => 상수
		
	- 상수 형식
		final 자료형 상수이름 = 값;
		final MAX_SPEED = 20;

	- 상수를사용하는 이유
		변하지 않는 값에 의미부를 부여하기 위해

▣ 리터럴(literal) 
	- 상수와 구분하기 위해 사용
	- 값 자체
	- 문자 리터럴 : 'a'  , ''
	- 문자열 리터럴 : "a", ""

==============================
▣ 메모리 구조
	
	RAM 구조

	=================
	OS Kennel space	 	드라이버	
	------------------------
	Stack			지역변수, 매개변수
	-----------------------
	heap			동적메모리
	-------------------------
	BSS			초기화 되지 않는 전역 변수
	-----------------------
	Data			전역변수, 정적변수(static)
	---------------------
	Code(Text) 		상수, 실행할 프로그램들의 코드
	=============


   자바의 메모리 구조( jvm 관리 )
		Method 영역	|	Stack 영역 	|  heap영역   |  Resister 영역  |  Native Method Stacks

		<배운 것>
		Method 영역	|	Stack 영역 			| 	heap영역	   	|
		class  영역	|	선언하는 모든 변수들	    |			    |
		static 영역	|			    |			    |
		final 영역	|			    |			    |
		
		method는 어떤 것이던지 공유가 가능하고 공통적으로 쓰여지는 영역이다.
		stack영역은 선언한 모든 변수들이 저장되어 있는 영역이다.
			이때!! 자료형이 class가 아닌 int, double등 참조 자료형이 아닌 경우에는 stack영역에서 변수와 초기값이 같이 저장된다.
			이에 반해 변수의 자료형이 참조 자료형인 경우(ex)String => class String에서 가져온 것임)에는 변수는 stack에 저장되고
				초기값들이나 값들은 heap에서 그 값이 저장되어 있는 주소값을 불러와서 사용하게 된다. 따라서 이때는 stack에 주소값만 저장되어 있다.
		

================================================================
▣  자료형(Data Type)
	기본 자료형(8개)
		boolean : 참과 거짓만 저장하는 자료형 (true, false)
		정수형 - byte(byte), short(2byte), int(4byte), long(8byte)
			기본 : int : 10, -3, 0
			        long : 숫자l, 숫자L,   20L,  -5L, 0L
		실수형 - float(4byte), double(8byte)
			기본 -double형  :  30.0,  45.9, -2.3, 0.0
			float  :  숫자f,   숫자F,   30.0f, 45.9f
		문자 정수 - char

	참조 자료형  : 배열, 클래스, 열거,....

▣ 기본자료형 간의 타입(형)변환
1. 자동 형변환
	- 큰 크기 자료형(타입) = 작은 크기 자료형
		long num = 3;  => long num = (long)3; 
	- 작은 크기 자료형을 큰 크기의 자료형 담으면 자동으로 큰 크기의 자료형으로 변환(up casting)
	- 자동 형변환은 이전값과 변환 이후의 값이 동일
		( 변환 이전의 값은 변환 이후에도 손실 없이 그대로 보존됨)
	- 정수 연산(+, -, *, /) 정수  =  정수
		byte + byte  => int
		7 / 3 => 2
		5 / 2 => 2
	- 정수 연산(+, -, *, /) 실수  => 실수
		3 + 2.5 => 5.5
		7 / 2.0 => 3.5  => (double)7 / 2.0
		7.0 / 2 => 3.5  => 7.0 /(double)2

2.  강제 형변환(Casting) 
	- 형 변환 연산자를 사용해 데이터 타입을 강제로 변환하는 연산
		(자료형) 값;
		(double)2  => 2.0
	   주의)  자료의 손실이 있는지 없는지 확인 필요
		작은 크기 자료형 = (작은 크기 자료형)큰크기 자료형
		int num = 3.5;  => 에러,   3.5 실수(double)
		int num = (int)3.5;  => down casting


3. 문자열 형변환
	- 문자열은 어떤 자료형과 묶으면 무조건 문자열
	- 기본 자료형을 문자열로
		항상 문자열이 됨 :    1 + "3"  => "1 + 3"
				 "가" + 7  => 가7
				3 + 5 + "나"  => "8다"
				"다" + 7 + 3  => "다73"
				35 + ""  => "35"
				"가" + true  => "가true"
	- 문자열을 일반 자료형으로 
		정수 : Integer.parseInt("")
		실수 : Double.parseDouble("")
		         Float.parseFloat("")
		"35"  =>  Integer.parseInt("35")  => 35
		"7.5"  => Double.parseDouble("7.5")  => 7.5
	------------------------------------------------------
		//자동 형변환
		System.out.println(15/2); // 정수 / 정수 = 정수, 7
		System.out.println(15/2.0); // 정수 / 실수 = 실수, 7.5
		
		//강제 형변환
		System.out.println(15/(double)2); //정수 / 실수 = 실수, 7.5 
 		System.out.println((int)8.43 + 2.3);// 정수(8) + 실수  = 실수, 10.3
		System.out.println((int)(8.43 + 2.3));//(정수)(실수 + 실수) = 정수 , 10
		
		// 3.45 + 7.63 => 10
		System.out.println((int)3.45 + (int)7.63);
		
		// 3.45 + 7.63 => 11
		System.out.println((int)(3.45 + 7.63));
		
		// 문자열로
		System.out.println("1" + 3);// 문자열 + 정수 => 문자열 ,  "13"
		System.out.println("가" + 2 + 7);// 우선순위(왼 -> 오) , "가27"
		System.out.println("5" + 2 + 7);// "527"
		System.out.println("5" + (2 + 7));// ()는 모든 연산에서 가장 우선 처리, "59"
		System.out.println(2 + 7 + "나");// 왼 -> 오, "9나"
		System.out.println(2 + 7 + "5");// "95"
		
		// 정수값으로, 클래스 형변환 : 클래스 타입으로 형변환
		// System.out.println((int)"3" + 7);//"3" String 클래스 형이므로
		System.out.println(Integer.parseInt("3") + 7);// 10

==========================
▣ 서식문자(format)
	- println()의 단점 
		출력 형식 지정할 수 없다.
		실수의 자릿수를 조절할 수 없다.
		10진수로만 출력할 수 있다. (2진수, 8진수, 16진수로 출력할 수 없음)
	- printf() : 서식문자를 쓰기 위한 출력함수

	- 서식 문자는 반드시 " " 안에 작성한다.
		%d : 10진 정수(decimal) 형식으로 출력
		%o : 8진 정수(octal) 형식으로 출력
		%x : 16진 정수(hexadecimal) 형식으로 출력
		%f : 실수 형식으로 출력, 부동 소수점 형식으로 출력
			%전체자릿수.소수점이하자릿수f
			%5.2f 
		%c : character(문자)형식으로 출력
		%s: String(문자열) 형식으로 출력

  		* 자릿수 확보 :  %전체자릿수
			%3d  : 왼쪽부터 채우기
			%-3d : 오른쪽부터 
		----------------------------------------------
		double num = 756.32346;
		double su = 75.15232123;
		int kor = 90, eng = 80, mat = 95;
		String name = "홍길동";
		
		System.out.println(num);
		System.out.printf("%.2f\n", num);
		
		System.out.println(su);
		System.out.printf("%f \n", su);// 소수이하 6자리까지만 정확한 값, 7번째 자리부터는 오류 나옴
		System.out.printf("%.2f \n", su);
		
		// 이름  국어  영어  수학
		// System.out.println("\t" + name + "중간고사 성적표");
		System.out.printf("=== %s 중간고사 성적표 ===\n", name);
		System.out.println("이름\t국어\t영어\t수학");
		System.out.println("==============================");
		// System.out.println(name + "\t" + kor + "\t" + eng + "\t" + mat);
		System.out.printf("%s\t%d\t%d\t%d\n", name, kor, eng, mat);
		System.out.println("==============================");

--------------------------
//		원의 넓이 구하기( 반지름 * 반지름 * 원주율)
//		반지름 : 3.5 
//		원주율 : 3.14는 상수로 선언

//		원의 넓이 = ~~

		double area=0.0, r = 3.5;  // 초기화 하지 않으면 쓰레기값이 담길 수 있기에 반드시 초기화를 한다.
		// final 자료형 상수명 = 값;
		final double PI = 3.14;  // 상수명은 언제나 대문자
		
		// System.out.println("원의 넓이 = " + (r * r * PI));
		
		area = r * r * PI;
		System.out.println("원의 넓이 = " + area);


▣ 키보드로부터 입력받기
1. 입력 
	커서가 깜빡이고 있는 상태
	입력하기 전에 출력하고 싶은 데이터를 사용자가 입력할 수 있도록 미리 사용자에게
	메시지를 남겨 준다.( System.out.println("정수 입력>>"); ) => 안내 문구를 써라

3. 데이터 입력 클래스
	- Scanner 클래스를 사용
	- 패키지 아래에 import를 이용해서 컴파일러에게 Scanner클래스 있는 곳 알려주고 불러오게 함
	    import java.util.Scanner;    (Shift + Ctrl + O, Scanner  클래스명 위에 마우스 올려 놓으면 나오는 메시지 이용)
	
		* import : 컴파일러에게 알려주기, 해당되는 클래스들을 미리 불러와

4. 데이터 입력 메서드
	- 콘솔 창에서 커서를 깜빡여 줌
		next() : 문자열(String) 사용자가 입력한 문자열 값
			사용자가 입력한 값 중 공백 또는 줄바꿈 문자(Enter)를 구분점으로 각 문자열을 분리
		nextLine() : 문자열(String), 사용자 입력한 문자열의 값, 공백도 값으로 취급( 주소를 입력시 많이 사용)
		nextInt() : 정수형(int)
		nextLong() : 정수형(Long)
		nextDouble() : 실수형( double )

		-------------------------------------------------
		Scanner scan = new Scanner(System.in);  // 키보드로 부터 입력 받겠음
		int num = 0;
		String strName = null, strScore=null; // ""
		String message = "이름과 점수를 입력>>";
		
		//메시지
		// System.out.println("정수 입력>>");
		System.out.println(message);  //사용자 어떤 값을 입력할 지 알려주기
		// num = scan.nextInt();  //정수
		
		strName= scan.next();
		strScore = scan.next();
		
 		// System.out.println("입력된 값 = " + num);
		System.out.println("이름 = " + strName);
		System.out.println("점수 = " + strScore);

==========================================
▣ 연산자
1. 산술 연산자
	+ : 덧셈
	- : 뺄셈
	* : 곱셈
	/ : 나눗셈,   정수 / 정수 => 정수,  정수 / 실수 = 실수
	% : 나머지  => 정수 연산만
	
	7 / 2 => 3  
	7 % 2 => 1
	
	홀수 :  숫자 % 2 == 1  // = 대입,  == 같다
	짝수 : 숫자 % 2 == 0 
	n의 배수 :  숫자 % n == 0

2. 관계 연산자
	- 결과가 true, false
	> : 크다, 초과
	>= : 크거나 같다, 이상
	< : 작다, 미만
	<= : 작거나 같다, 이하
	== : 같다
	!= : 같지 않다.

3. 대입연산자
	+= :    a += 2  => a = a + 2
	-= :     a -= 2  => a = a - 2
	*=
	/=
	%=

4. 증감연산자(++, --) : 1을 증/감
	- 전위형 : 나머저 증감하고 계산에 참여
		++a :  a = a + 1,   a += 1
		 --a  :  a = a - 1,   a -= 1

	- 후위형 : 먼저 계산에 참여하고 나중에 나를 증감하겠음
		a++ :  a = a + 1,  a += 1
		a--  :  a  = a - 1,  a  -= 1

5. 논리 연산자 ( &&, || , ! )
	- 결과가 true, false
	- && : and(그리고)
		국, 영, 수 세과목 모두 60점 이상 => 국>=60 && 영>=60 && 수>=60
		num이 1~ 100 사이의 값이면 :  num >= 1 && num <= 100
	- || : or(또는)
		국, 영, 수 세과목 중 적어도 한 과목이상이 60점 이상 => 국>=60 || 영>=60 || 수>=60
		su가 3보다 적거나 20보다 크면 :  su < 3 || su > 20


		값1	&&	값2	결과	
		true		true	true
		true		false	false
		false		true	false
		false		false	false

		* 소트 서킷 : and 식일때  앞의 식이 false이면 뒤의 식을 보지 않고 처리

		값1	||	값2	결과	
		true		true	true
		true		false	true
		false		true	true
		false		false	false
		* 소트 서킷 : or 식일때  앞의 식이 true이면 뒤의 식을 보지 않고 처리


6. 삼항 연산자
	조건식 ?  조건식의 결과가 참일 때 실행할 값 : 조건식의 결과가 거짓일 때 실행할 값
	
	* 조건식  : 결과가 true나 false 나올 수 있는 식
	
	num % 2 == 0 ? "짝수" : "홀수"


		// num1 이 num2 보다 크거나 같으면 : num1 * num2
		// num2 가 num1 보다 크면 : num1 + num2
		
		int num1 =80, num2=90, result=0;
		String strResult=null; // ""
		
		result = (num1 >= num2)? num1 * num2 : num1 + num2;
		System.out.println(result);
		
		// num1이 짝수인지 홀수 인지 판별 출력
		strResult = (num1 % 2 == 0)? "짝수" : "홀수";
		System.out.println(strResult);

---------------------------------------------------------------
		//문1) 숫자 2개를 입력 받아서 덧셈, 뺄셈, 곱셈, 나눗셈, 나머지 결과를 출력
		
		// 숫자1  + 숫자2  = ?
		// 숫자1  - 숫자2  = ?
		// 숫자1  * 숫자2  = ?
		// 숫자1  / 숫자2  = ?
		// 숫자1  % 숫자2  = ?
		
		//문2) 534자루의 연필을 30명의 학생들에게 똑같은 개수로 나누어 줄 때
		//    학생당 몇 개를 가질 수 있고 최종적으로 몇 개가 남는지 프로그램 작성
		
		// 1인당 연필 개수 = ?
		// 나머지 연필 개수 = ?
		
		
		//문3) 다음에 제시한 예시와 같은 결과가 나오도록 프로그램 작성
		// value = 546 일때   출력형태는 value = 540 
