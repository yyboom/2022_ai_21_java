/////////////////////////////////////////DAY7///////////////////////////////////////////////
1. 메서드 오버로딩(overloading)
	- 하나의 메서드 이름으로 여러 기능을 담는다하여 붙여진 이름
	- 오버로딩의 조건 : 매개변수의 타입, 개수, 순서 중 하나가 달라야 한다.
		단, 리턴타입(변환타입)은 의미가 없다. -> 리턴타입이 다른 것은 "메서드 오버로딩"이라고 하지 않는다.
		컴파일러는 매개값을 가지고 찾기 때문임
		(생성자 오버로딩도 같음)
=======================================================

static(정적) 멤버(메서드, 필드)
	- 정적 : '고정된'
	- 정적멤버(정적필드, 정적메서드)는 클래스에 고정된 멤버로서 객체를 생성하지 않고
		사용할 수 있는 필드와 메서드를 말한다.
	- 클래스에 소속된 멤버로써 객체 내부에 존재하지 않고, 메서드 영역에 존재한다.
	- * 정적멤버는 객체를 생성하지 않고 클래스로 바로 접근해서 사용함
	- 공용적인 데이터를 처리하고 싶을 때 사용

1. 정적멤버 선언(static 멤버)
	- 클래스 별로 관리가 됨
	- 클래스가 로딩되면 바로 사용할 수 있다.

	public class 클래스명{
		int 필드명; -> 인스턴스 필드
		static 자료형 필드명 -> static 필드
		
		void showInfo(){}->인스턴스 메서드
		static 리턴타입 메서드명(매개변수...){실행}-> static메서드
		=> 객체 생성이 없을때도 쓸 수 있음

	//cf) 인스턴스 멤버 : 반드시 객체를 생성해야 사용 가능
	      자료형 필드명;
	      자료형 필드명=값;

	      리턴타입 메서드명(매개변수...){}
2. 정적 멤버 사용(static 멤버 사용)
	클래스명.필드명
	클래스명.메서드명()
3. 정적 초기화 블록
	static {
		//초기화 시킬 것들
	}
	- 인스턴스 필드는 생성자에 의해서 초기화됨
	- static은 객체(인스턴스)를 생성하지 않기 때문에 따로 초기화 블록 설정
	  (자동으로 초기화 해주지 않음)
	- 정적 블럭(static 블럭)은 클래스가 메모리로 로딩될 때 자동적으로 실행됨
	- 클래스 내부에 여러개 선언되어도 상관없음. 
		클래스가 메모리로 로딩될때 선언된 순서대로 실행하기 때문
4. 정적 메서드와 블록 선언시 주의 사항
	- 정적메서드(=static 메서드, 클래스 메서드)안에는 인스턴스 필드를 사용할 수 없다.
	  왜냐하면 인스턴스는 객체가 생성되어야만 만들어지기 때문에
	  static은 객체 생성 없이도 사용할 수 있고, 클래스가 로드될 때 바로 선언되기 때문에 
	- 객체 자신의 참조인 this 키워드도 사용 불가
	- 정적 메서드와 정적 블록에서 인스턴스 멤버를 사용하려면 객체를 먼저 생성하고 참조변수로 접근해야 함
		(main()메서드도 static이여서 객체 생성 없이 인스턴스 필드와 인스턴스 메서드를 바로 사용할 수 
		없었음)