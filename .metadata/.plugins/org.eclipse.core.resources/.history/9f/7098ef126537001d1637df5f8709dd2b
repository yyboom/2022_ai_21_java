/////////////////////////////////////////DAY13///////////////////////////////////////////////
▣ Thread
1. 용어 정리
	-  program : 하드디스크에 저장된 파일들의 모임
	-  process : 실행 중인 프로그램, 실행되기 위해서는 반드시 메모리에 로딩되어 있어야 함
		운영체제의 제어 받는 상태
		자신만의 자원을 가진다.
	- thread : cpu를 사용하는 최소단위
		하나의 실행 흐름으로 프로세스 내부에 존재
		. 단일 쓰레드 : 2개의 작업을 처리할 때 각 작업을 순차적으로 처리
		. 멀티 쓰레드 : 병렬처리, 병행처리(동시성)을 가지고 있음. 이것들을 활용해 여러 작업을 
			동시에 실행하거나 동시에 실행하는 것처럼 보이게 하는 것


	- multi-tasking : 두 가지 이상의 작업을 동시에 처리하는 것
	- 병렬 처리(parallel) : 멀티코어 cpu에서 다수의 작업을 동시에 처리
	- 병행 처리(concurrent)  : cpu 시간을 분할해서 교대로 각 작업에 할당

	- 자바에서 Thread
		jvm   ----> main Thread 생성
		. 시작 시점에서는 main 쓰레드 하나만 있음
		. 이후 메인 쓰레드에서 쓰레드를 생성 => 멀티 쓰레드

2. Thread  생성과 실행
	1) Thread 생성 방법 
		- 방법 1 : Thread 클래스의 run() 메서드를 오버라이딩(재정의)
		- 방법2 : Runnable interface  구현 
			(추상메서드인 run() 메서드를 구현)

3. 방법1 - Thread 클래스의 run() 메서드를 오버라이딩(재정의)
	1) 클래스 만들기  : Thread클래스를 상속받아서 run()메서드를 재정의
		class MyWorkThread  extends Thread{
			@Override
			public void run(){
				쓰레드 작업을 할 내용
			}
		}
		
	2) 객체 생성
		Thread  myThread = new  MyWorkThread();
		또는
		MyWorkThread myThread = new  MyWorkThread();

	3) 쓰레드 실행시키기
		myThread.start();  
		

----------
   ** 쓰레드 생성하지 않은 상태
package threadExam;

public class ThreadExam01 {

	public static void main(String[] args) {
		// 미국 드라마 : 자막, 영상을 같이 보기
		// 영상이 5장면
		int[] videoArray = {1, 2, 3, 4, 5 };
			
		// 자막 5장면
		String[] subtiltleArray = {"하나", "둘", "셋", "넷", "다섯"};
		
		//영상 출력
		for(int i=0; i<videoArray.length; i++) {
			System.out.println("드라마 영상 출력 : " + videoArray[i]);
			
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				System.out.println("에러 발생");
			}
		}
		
		//자막 출력
		for(int i=0; i<subtiltleArray.length; i++) {
			System.out.println("드라마 자막 출력 : " + subtiltleArray[i]);
			
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				System.out.println("에러 발생");
			}
		}
	}

}

===================== 
** 쓰레드를 3개 생성(main, subThread, dramaThread)
package threadExam;

public class SubtitleThread01 extends Thread {
	// 자막 쓰레드

	@Override
	public void run() {
		String[] subtiltleArray = { "하나", "둘", "셋", "넷", "다섯" };

		// 영상보다 자막을 조금 늦게 나오게(0.02초정도 늦게 실행)
		try {
			Thread.sleep(200);
		} catch (InterruptedException e1) {
		}

		// 자막 출력
		for (int i = 0; i < subtiltleArray.length; i++) {
			System.out.println("드라마 자막 출력 : " + subtiltleArray[i]);

			try {
				Thread.sleep(500); //0.5초 ( 1000 - 1초,ms)
			} catch (InterruptedException e) {
				System.out.println("에러 발생");
			}
		}
	}

}
----
package threadExam;

public class DramaThread01 extends Thread {
	@Override
	public void run() {
		// 드라마 영상 - 영상이 5장면
		int[] videoArray = { 1, 2, 3, 4, 5 };

		// 영상 출력
		for (int i = 0; i < videoArray.length; i++) {
			System.out.println("드라마 영상 출력 : " + videoArray[i]);

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				System.out.println("에러 발생");
			}
		}

	}
}
----
package threadExam;

public class StrartMainThreadExam {

	public static void main(String[] args) {
		// 영상쓰레드, 실행
		Thread subThread = new SubtitleThread01();
		subThread.start();

		Thread dramaThread = new DramaThread01();
		dramaThread.start();
	}

}
=========================
4.  방법2 - Runnable interface  구현 
			(추상메서드인 run() 메서드를 구현)

	- Thread 생성자로 Runnable 객체 전달
	
	1) 클래스 만들기 - Runnable인터페이스를 구현한 클래스
		추상메서드인 run() 구현
		
		class MyRunableThread  implements  Runnable{
			@Override
			public void run(){
				쓰레드 작업 내용
			}
		}

	2) 객체 생성
		Runnable runable = new  MyRunableThread();
		Thread myThread = new Thread(runable);
		또는 
		 MyRunableThread  runable01 = new  MyRunableThread();
		Thread myThread = new Thread(runable01);

		또는
		Thread myThread = new Thread( new  MyRunableThread() );

	3) 쓰레드 실행하기
		myThread.start();


     ==> 위 방법 변경
	Thread myThread = new Thread( new  Runnable(){
			@Override
			public void run(){
				쓰레드 작업 내용
			}
            } );

        myThread.start();
  ------
	Thread myThread = new Thread( new  Runnable(){
			@Override
			public void run(){
				쓰레드 작업 내용
			}
            } ).start();

=================
package threadExam;   

public class JavaRun implements Runnable {

	@Override
	public void run() {
		// java 3번 실행
		for (int i = 0; i < 3; i++) {
			System.out.println("java");

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {

			}
		}
	}

}
---------------
package threadExam;

public class HelloJavaThreadExam {

	public static void main(String[] args) {
		Thread hThread = new Thread(new HelloRun());
		hThread.start();
		
		//java  3번 실행
		for(int i=0; i<3; i++) {
			System.out.println("Java");
			
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {

			}
		}
		
	}

}
====================================
package threadExam;

public class JavaRun implements Runnable {

	@Override
	public void run() {
		// java 3번 실행
		for (int i = 0; i < 3; i++) {
			System.out.println("java");

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {

			}
		}
	}

}
-----
package threadExam;

public class HelloRun implements Runnable {

	@Override
	public void run() {

		try {
			Thread.sleep(200);
		} catch (InterruptedException e1) {

		}

		// hello 3번 실행
		for (int i = 0; i < 3; i++) {
			System.out.println("Hello");

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {

			}
		}

	}

}
------
package threadExam;

public class HelloJavaThreadExam02 {

	public static void main(String[] args) {
//		Thread hThread = new Thread(new HelloRun());
//		hThread.start();
//		
		Runnable subRun = new HelloRun();
		Thread hThread = new Thread(subRun);
		hThread.start();

		Thread jThread = new Thread(new JavaRun());
		jThread.start();

	}

}
========================
package threadExam;

public class HelloJavaThreadExam03 {

	public static void main(String[] args) {
		Thread hThread = new Thread(new HelloRun());
		hThread.start();

		// 방법1 => JavaRun()클래스 필요
//		Thread jThread = new Thread(new JavaRun());
//		jThread.start();

		// Runnable rTest = new Runnable() ;
		// Runnable은 인터페이스, run() 추상메서드 가지고 있음
		// 추상메서드가 있으면 객체를 생성할 수 없음
		// 추상메서드를 완성시켜 주면 객체를 생성할 수 있음
		// 자식 객체를 생성해서 추상메서드를 완성(구현)

// 방법2 : JavaRun() 클래스 필요 없음, 바로 구현
//		Thread jThread = new Thread(new Runnable() {
//			@Override
//			public void run() {
//				// java 3번 실행
//				for (int i = 0; i < 3; i++) {
//					System.out.println("java");
//
//					try {
//						Thread.sleep(500);
//					} catch (InterruptedException e) {
//
//					}
//				}
//			}
//		});
//		jThread.start();

		// 방법3
		new Thread(new Runnable() {
				// java 3번 실행
				for (int i = 0; i < 3; i++) {
					System.out.println("java");

					try {
						Thread.sleep(500);
					} catch (InterruptedException e) {

					}
				}
			}
		}).start();

	}
}
==================
5.  쓰레드 풀
	- 쓰레드의 개수가 많아지면 cpu와 메모리에 많은 부하가 발생
	- 제한된 개수의 쓰레드를  jvm이 관리하도록 맡기는 방식
	- 실행할 작업을 쓰레드 풀로 전달하면 jvm 이 쓰레드 풀의 유휴 스레드 중 하나를 선택해서 쓰레드로 실행

	 - 쓰레드 풀 생성 , 반드시 start()메서드 전에 선언
		ExecutorService 참조변수명 = Executors.newCachedThreadPool();
		참조변수명c.execute(작업);
	
	
 	 - 쓰레드 풀 종료
		.shutdown() : 현재 처리 중인 작업과 남아 있는 모든 작업을 처리한 후 쓰레드 풀을 종료
		.shutdownNow() : 현재 처리 중인 작업을 중지시키고 쓰레드 풀을 종료


	- 병렬 작업 처리가 많아지면 쓰페드 개수가 증가되고 그에 따른 쓰레드 생성고 스케줄링으로 인해  cpu와 메모리 사용량이 증가
	  로 애플리케이션의 성능이 저하
	- 쓰레드 풀은 작업 처리에 사용되는 쓰레드를 제한된 개수만큼 정해 놓고 작업큐에 들어오는 작업들을 하나씩 쓰레드가 맡아 처리
	- 작업 처리가 끝난 쓰레드는 다시 작업 큐에서 새로운 작업을 가져와 처리
	- 작업 처리 요청이 폭증되어도 쓰레드의 전체 개수가 늘어나지 않으므로 애플리케이션의 성능이 급격히 저하되지 않음

   	- java.util.concurrent 안의 ExecutorService  구현 객체를 만들어 사용


6. 데몬 쓰레드
	- 쓰레드는 독립적으로 수행되기 때문에 메인 스레드를 종료해도 작업 스레드는 계속 실행 됨
	- 다른 쓰레드가 종료되면 자동으로 종료되어야 하는 쓰레드를 데몬(daemon) thread 라고 함,  우선순위가 가장 낮음
	- 쓰레드명.setDaemon(true); // 데몬 쓰레드 실행

package threadExam;

public class AutoSaveThread extends Thread {
	public void save() {
		System.out.println("작업내용을 저장함.");
	}

	@Override
	public void run() {
		while (true) {

			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				break; // while문 종료
			}
			save();
		}
	}
}
------------------
package threadExam;

public class DaemonExam {

	public static void main(String[] args) {
//		데몬 쓰레드 실행 전
//		AutoSaveThread autoSave = new AutoSaveThread();
//		autoSave.start();
		
//		데몬쓰레드 실행
// 		반드시 start()메서드 전에 선언
		AutoSaveThread autoSave = new AutoSaveThread();
		autoSave.setDaemon(true); // 데몬 쓰레드 실행
		autoSave.start();

		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {

		}
		System.out.println("메인 쓰레드를 종료");
	}

}
===============================
7. 동기화(synchronized)
	- 하나의 작업이 완전히 완료된 후 다른 작업을 수행
	- 다수의 쓰레드가 공유 자원을 충돌 없이 사용할 수 있도록 공유 자원에 배타적이고 
	  독점적으로 사용할 수 있는 방법
	- 쓰레드의 동기화는 하나의 쓰레드가 동기화 블록을 실행하면 그 쓰레드가 동기화 블록을 벗어나 때
	  까지는 동기화 블록을 사용하려는 모든 쓰레드를 중지 시킴
	- 동기화하려는 임계영역  앞에 synchronizede 키워드를 붙임
	

	- 임계영역 : 다수의 쓰레드가 공유 자원을 참조한ㄴ 코드 영역

	. 동기화 메서드
		public synchronized void 메서드명(...) {  
			임계영역 코드
		}
	. 동기화 블록
		synchronized (공유객체){
			임계영역 코드
		}
 --------	
예제는 교재 p591 ~ 595  참고