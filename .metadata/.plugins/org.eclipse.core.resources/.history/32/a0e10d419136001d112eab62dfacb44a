/////////////////////////////////////////DAY10///////////////////////////////////////////////
▣ 인터페이스(interface)
	- 추상클래스를 심화시킨 특수한 형태
1. 인터페이스의 정의
	- 모든 필드가 public static final로 정의, 생략하면 컴파일러가 자동으로 컴파일 시 추가함
	- 모든 메서드가 public abstract로 정의, 생략하면 컴파일러가 자동으로 컴파일 시 추가함
	- 단, default 메서드는 제외

	* 추상클래스로 구현 => 자체적으로 객체 생성이 불가능하다.
		접근제한자(public) interface 인터페이스명{
			//필드
			public static final 필드명 = 값;

			//메서드
			public abstract 리턴타입 메서드명(매개변수...);//{}body가 없다.
		
			//default 메서드->유일하게 추상이 아니다.(java 1.8부터)
			public default 리턴타입메서드명(매개변수...){}//body가 구현됨

			//static 메서드(java 1.8부터)
			public static 리턴타입 메서드명(매개변수...){}//body구현함	
	- 인터페이스는 상속할 때 extends대신 implements를 적음
	- 인터페이스는 완성이 다 안된 상태이므로 다중구현이 가능!!
====================================================================
2. 인터페이스의 상속
	- implements 사용
	- 다중 상속(구현)이 가능
	- class는 단일 상속만 가능
	
	interface A {...}
	interface B {...}
	interface C {...}

	//가능
	class InterExam implements A ()
	class InterExam implements A, B ()
	class InterExam implements A,B,C () ->다중 구현이 가능

	//불가능
	class InterExam extends D, E{}
	class CarClass extends A, B, C{ }
	인터페이스가 인터페이스를 구현하는 것은 안됨. 
	(완성이 안되어있는데 구현한다는건 말이 안됨)

	// 가능 순서 중요.인터페이스 인터페이스끼리는 extends해야함!=>이때는 상속이라함
	// 클래스명 extends 클래스명 implements 인터페이스명, 인터페이스명, ..{  }
	public class CarClass implements InterfaceCar { }
	public interface InterCar01 extends InterfaceCar02{ } 

	//불가능
	public interface InterCar01 implements  InterfaceCar02 {	}  // 인터페이스가 미완성이기 때문
===============================================================================
▣ 예외(exception)
		Object
		Throwable
	Error			Exception	
				    일반예외		RuntimeException : 실행예외
1. 예외(Exception)와 Error의 차이점
	- Exception : 연산오류, 포맷오류 등 상황에 따라 개발자가 해결 가능한 오류
			대처방안을 만들 수 있는 오류
			ex) x=7/0;
				=>예외 발생 -> 해결방안 제시 하면 에러가 떨어지지 않음
	- Error(에러) : jvm자체의 오류로 개발자가 해결할 수 없는 오류
			에러 발생 -> 종료됨(해결방안 x)
		OutOfMemoryError, ThreaDeaths
2. 예외클래스
	- 일반예외(Checked Exception) : 컴파일 전에 checking이 됨
					=>빨간 줄로 나타나게 되는 것들
						문법을 체크한다는 뜻으로 예외처리가 필수
						예외 처리를 하지 않으면 컴파일 자체가 불가능함
	
	- 실행예외(Runtime Exception) : 실행시 체크, 문법을 체크 하지 않음
		컴파일에는 문제없지만 실행하다 예외가 발생하면 프로그램이 종료
		예외처리를 하지 않아도 컴파일은 가능, 실행 중 예외가 발생하면 프로그램 종료
3. 예외처리 : 예외 처리하면 정상 실행 가능
	try{
		예외 발생 가능 코드
	}
	catch(예외클래스이름 참조변수명){
		해당 예외가 발생할 경우 처리할 코드들
	}