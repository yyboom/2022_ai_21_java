/////////////////////////////////////////DAY9///////////////////////////////////////////////
▣ 최상위 클래스 : Object
	- 컴파일러는 클래스가 특정한 클래스로 상속 받지 않으면 자동으로 extends Object를 삽입함
	- 모든 클래스의 조상 클래스임
1. 주요 메서드
	반환타입		메서드		주요 내용
	- String		toString()		Object 객체의 정보를 표시(패키지명. 클래스명@hashcode)
					일반적으로 클래스들에서 overriding(재정의)해서 사용함
	- boolean	equals(Object obj)  입력매개변수 obj객체와 stack 메모리값(번지) 비교
					비교 연산자 == 와 같은 결과
					일반적으로 클래스들에서 오버라이딩(재정의)해서 사용함
					* 스택메모리의 값 비교 : 기본자료형-값을 비교, 참조자료형-객체의 위치값을 비교
	- int		hashcode()	객체의 hashcode()값 리턴
					hashtable, hashMap 등의 동등 비교에 사용
					위치값을 기반으로 생성되는 고유값
========================================================================================
▣ 추상클래스(abstract class) : 완성되어 있지 않은 메서드를 하나이상 가지고 있는 클래스임 -> 객체가 되지 못함
			=> 완성되어있는것+완성되어있지 않은것
			- 추상 메서드(abstract method)를 포함한 클래스
			- 추상메서드: 본체가 정의되어 있지 않음 미완성 메서드
				*abstract void showInfo();  => 추상, 중괄호가 없으니 body부분 없음. 미완성 메서드
				cf) void kind(){} => 중괄호가 있으면(body 존재) 완성된 메서드임
			**메서드의 완성과 미완성의 구분 기준 : 중괄호({})가 있느냐 없느냐의 차이
			
			- 추상 클래스
			  접근 제한자 abstract class 클래스명{
					미완성된 추상 메서드 포함
				}
			- 상속을 통해 자식클래스에서 추상메서드를 반드시 오버로딩(재정의)해서 완성해야함.
				=> 이렇게 되면 메모리에 올라감.
			- 추상클래스의 필요성
				부모의 일반 메서드를 상속받은 자식은 재정의 할 수도 있고 안할 수도 있다.
				*그러나 추상메서드를 상속받은 자식은 반드시 재정의해야만 오류가 없어지고 객체 생성도 가능
				재정의해서 사용해야 문제가 없는 것은 재정의 하지 않아도 오류가 발생하지 않기 때문에
				재정의를 놓치고 지나칠 수도 있어 크나큰 오류를 만들어 낼 수 있다.
				(자식이 반드시 재정의(오버라이딩)했다는 보장을 할 수 없다.)
				그러나 추상 메서드는 자식이 재정의하지 않으면 에러가 발생하여 반드시 재정의를 해줘야 함으로
				재정의를 빼놓는 실수를 하지 않게 된다.
				추상 클래스를 사용하면 자식 클래스가 반드시 재정의했다는 것을 보장할 수 있다.
			- 추상 클래스의 특징
				추상 클래스는 그 자체로는 객체 생성 할 수 없다. 왜냐하면 미완성메서드(추상 메서드)를 포함하므로
				heap 메모리는 완성되지 않은 것을 올릴 수 없다.
			- 익명 이너클래스를 사용하면 컴파일러가 내부적으로 클래스를 생성한 후 메서드 오버라이팅(재정의) 수행
			  클래스의 이름을 알 수 없고 클래스 안에 생성되기에 이너클래스라고함
인터페이스 : 모든 메서드가 완성이 되어 있지 않은 상태인 클래스들을 말함!
		=> 모든 것이 완성되어있지 않음
==================================================================================================
* 상속을 통한 구현과 익명이너클래스 사용의 장점과 단점
	1) 추상 클래스를 일반클래스로 상속하여 객체 생성
		- 객체를 여러 개 생성할 수 있다.
		- 객체는 클래스 이름만 알고 있으면 몇 개건 만들 수 있다.
		- 클래스를 만들어야 하기에 조금 복잡해 보일 수 있다.
		- 객체를 여러 개 만들고자 할 때는 좋다.
	2) 익명이너클래스 사용(1권에 p.404)
		- 클래스를 모르기 때문에 객체를 만들때마다 구현부분을 다 작성해야 한다.
		- 딱 한번만 쓸 것이라면 익명이 좋다. 주로 이벤트 처리에 좋음
		- 객체를 한번만 쓸 때 유리하다.

