/////////////////////////////////////////DAY6///////////////////////////////////////////////
1. package
	- 비슷한 목적으로 생성된 클래스 파일들을 한 곳에 모아둔 폴더
	 (클래스 파일을 목적별로 묶어서 관리)
	- 패키지 안에는 같은 이름의 클래스가 존재하면 안됨!
	->따라서 다른 회사들과의 플젝이 겹치지 않게 하기 위해서 패키지 이름은 보통 주소로 쓴다.
	- 프로젝트의 하위 촐더의 개념임
	- 목적별로 묶어서 관리
		java.lang : 자바의 가장 기본적인 클래스를 묶음(import를 안시켜도 알아서 처리해주는것)
		java.util : 유용한 확장 클래스 묶음
		java.io : 자바의 입출력 패키지 관련 클래스
	-패키지를 사용하는 이유
		패키지마다 다른 이름의 공간을 만들기 위해서 => 클래스 이름의 충돌을 방지하기 위해 만듦.
	-반드시 첫 줄에 표시
2. import
	- 자바가 제공하는 API나 다른 개발자가 만든 패키지에 위치한 클래스를 사용하려할 때 
	  다른 패키지의 클래스를 마치 자신의 패키지 내부에 있는 것 처럼 사용함
	- import 패키지명.클래스명->클래스의 이름을 풀 네임을 다 써서 안해도 됨
	-같은 클래스명을 가지고 올때는 import를 써도 컴퓨터가 구분하지 못할 수 있기 때문에 
	  풀 네임을 다 써줘야 함
	- import를 사용하는 이유
		다른 패키지의 클래스를 사용하고자 할 때
		클래스 이름의 전체 경로를 이름으로 사용
		   abs.bcd.efg.A a = new abc.bcd.efg.A() -> import하지 않은 경우 이렇게 사용

		  import.abs.bcd.efg.A; -> import한 경우
		  A a = new A();

		패키지가 다른 동일 한 이름의 클래스는 두개 이상 import 할 수 없음
		=>이런 경우에는 풀네임을 사용함

		접근제한자가 public이어야 다른 패키지에서  import할 수 있음

		패키지 안의 모든 클래스를 한번에 import하기 위해서는 *를 사용한다.
		import abc.bcd.A;
		import abc.bcd.B;
		import abc.bcd.C;
		=>import abc.bcd.*;
			단, 패키지는 import안됨
		public
			- 접근제한자임

클래스 구성요소
	1) 플래스 멤버
		필드( field =클래스 멤버 변수, 멤버 변수) 
			객체의 데이터가 저장되는 곳, 상태정보가 저장(이름, 나이, 색상, 스피드 ...)
		메서드(method)
			객체의 동작에 해당하는 실행 블록
			* 리턴 타입 메서드명(){}(반드시 괄호가 들어가야 메서드임)
			* 객체 간의 데이터를 전달할 때 사용
			* 외부로부터 매개값을 받을 수도 있고, 실행 후 어떤 값을 리턴(빤환) 할 수 있음
	2) 생성자
		객체 생성 시 초기화 역할 담당
		객체를 사용할 준비
		리턴 타입이 없다.
		클래스 명과 같다, 클래스명(){}
	3) 이너클래스
		클래스 안에 클래스를 넣는 것
필드
1. 필드 선언
	클래스 중괄호 안에 위치, 클래스 내에서는 어디서든지 사용할 수 있다.
	힙영역의 객체 안에 위치함(지역변수랑 위치하는 영역이 다름)
	힙영역에 올릴 때는 뭔가가 채워져 있을 때 올릴 수 있음(완료, 완성이 되어있어야함)
	->초기화를 내가 굳이 해주지 않아도 컴파일러가 자동으로 초기화 시켜줌
		정수(int) =>0
		  long    =>0L
		상수(double) =>0.0
		   float         =>0.0F
		참조자료형, 배열 => null
	
	cf) 지역변수 : 메서드, 생성자의 중괄호 {}안에 선언, 메서드가 종료되면 메모리에서 사라짐, 스택에 저장됨
		지역변수는 자동초기화가 안되므로 선언시 초기화 시켜줌
	
	초기화 : 접근제한자 자료형 필드명 = 값; => 모든 객체가 같은 값으로 초기화
		생성자이용해서 초기화
	필드 사용 범위
		클래스 내부에서 모두 사용가능(생성자,메서드)
		클래스 외부에서 사용하기 위해서는 반드시 객체를 생성한 뒤에 필드를 사용
		(필드는 객체에 소속된 데이터이므로 객체가 존재하지 않으면 필드도 존재하지 않는다)

		cf) 지역변수 : 자신이 선언된 생성자 또는 메서드 블록 내부에서만 사용
2. 생성자(Constructor)
	-new 연산자와 같이 사용되어 클래스로부터 객체를 생성할 때 호출되어 객체의 초기화를 담당
		객체의 초기화 : 필드를 초기화하거나, 메서드를 호출해서 객체를 사용할 준비를 하는 것
	- 생성자를 실행시키지 않고는 클래스로부터 객체를 만들 수 없다.(객체 - 힙영역에 만들어진다.)
	- 모든 클래스는 생성자가 반드시 존재하며, 하나 이상을 가질 수 있다.
	   클래스 내부에 생성자 선언을 생략하면 컴파일러가 기본 생성자를 내부적으로 생성해서 실행함.

	- 기본생성자 :
		클래스명(){}
	- 생성자 선언
		클래스명(매개변수 선언,...){
			객체의 초기화 코드 작성
		}
		매개변수는 new 연산자로 생성자를 호출할 때 외부의 값을 생성자 블록 내부로 전달하는 역할
			ClassMember lee = new ClassMember("이기자",5,85.0);
	-클래스에 생성자가 명시적으로 선언되어 있을 경우에는 반드시 선언된 생성자를 호출해서 객체를 생성해야 한다.
	
	1) 생성자 오버로딩(Overloading)
		-매개변수를 달리하는 생성자를 여러개 선언하는 것
		-매개변수의 타입, 개수, 순서가 다르게 선언
this
	- 객체 자신을 참조
	- 자신의 번지를 가지고 있음
	- 주로 생성자와 메소드의 
this()
	- 다른 생성자 호출
	- 오버로딩이 많아질 경우 생성자 간의 중복된 코드가 발생할 수 있음
	  이럴 때 필그 초기화 내용은 한 생성자에서만 집중적으로 작성하고 나머지 생성자는 초기화 내용을 가지고 있는 생성자를 호출하는 방법
	- this()는 자신이 다른 생성자를 호출하는 코드로 반드시 생성자의 첫줄에만 허용

=====================================================
예제
class Car
	제조사(company)
	모델(model)
	색상(color)
	최대속력(mawspeed)
<기본생성자>
cCarExam(실행 클래스) => 객체물 생성
	1)제조사 : 현대
	2) 모델 : 아반떼
	3) 색상 : 노랑
	4) 최대속력 : 250
<생성자 - 매개값>
	1)제조사 : 기아
	2) 모델 : k7
	3) 색상 : 빨강
	4) 최대속력 : 300		
========================================================
접근 제어자(modifier)
	- 자바 : 접근 지정자를 반드시 설정해야 함
	- class : public, defalut(=package)
	- 필드, 메서드, 생성자 : public > protected > default > private

	1) public : 모든 클래스에서 사용 가능(같은 패키지나 다른 패키지 다 사용 가능)
	->하지만 다른 패키지에서는 default값을 사용할 수 없음
	2) protected : 같은 패키지에 있는 클래스에서는 모두 사용 가능
			다른 채키지에서는 자식 클래스에서만 사용가능
	3) default : 접근제어자가 생략되면 모두 default임
			이는 같은 패키지 내에 있는 클래스 내에서는 자유롭게 사용 가능
			다른 클래스에서 쓰고 싶다면 필드에서 변수선언 시 public을 앞에 붙여줌
	4) private : 같은 클래스(자기자신 클래스) 안에서만 자유롭게 사용 가능
		=> 캡슐화, 데이터 은닉
		-> 외부에서 접근하기 위해서는 getter, setter메서드를 이용해서 접근
		- getter와 setter
			- 데이터는 외부에서 접글할 수 없도록 막고 getter&setter메소드는 공개해서 
			외부에서 메서드를 통해 데이터에 접근하도록 유도
			- 메서드는 매개값을 검증해서 유효한 값만 데이터로 저장하거나 내보낼 수 있음.
			- 앞에 get 또는 set을 쓰고 바로 뒤에 필드명의 첫 글자를 대문자로 처리
				getColor, setColor
			boolean형은 is뒤에 필드명을 붙인다. isMaxSpeed

메서드(method)
	- 객체의 동작에 해당하는 중괄호{} 블록
	- 메서드를 호출하게 되면 중괄호 블록에 있는 모든 코드들이 일괄적으로 실행됨
	- * 메서드는 객체 간의 데이터 전달의 수단으로 사용
	- * 외부로부터 매개값을 받을 수도 있고, 실행 후 어떤 값을 리턴(반환)할 수도 있다.
	- 중복 코드를 재사용할 수 있음
	- 코드의 모듈화를 통해서 코드의 가독성을 높인다.
	
1. 메서드 선언
	리턴타입 메서드이름(매개변수,...)//메서드 시그니처임, "header"이라고 부름{
		실행 코드를 작성하는 곳//"body"라고 부름
	}
	
	- 메서드 시그니처 : 선언부(리턴타입, 메서드이름, 매개변수 선언)과 {}
		리턴타입: 나를 부른 곳으로 가져간다.
2. 메서드를 정의할 때 고려할 사항
	- 리턴(반환) 타입을 어떻게 처리할 것이냐
		리턴되는 값이 없으면 리턴타입 - void
		리턴되는 값이 있으면 - 해당 리턴값의 자료형(int, string, double, 배열...)
	- 메서드를 외부에서 호출하는 경우 : 참조 객체를 만들어 놓고 호출
	- 메서드를 내부에서 호출하는 경우 : 메서드 이름으로 바로 호출 가능
==================================================
